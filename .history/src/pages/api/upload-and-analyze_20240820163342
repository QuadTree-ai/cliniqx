import { NextApiRequest, NextApiResponse } from 'next';
import formidable from 'formidable';
import { promises as fs } from 'fs';
import OpenAI from 'openai';
import pdfParse from 'pdf-parse';

// Initialize OpenAI API
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Disable the default body parser
export const config = {
  api: {
    bodyParser: false,
  },
};

const parseForm = (req: NextApiRequest): Promise<formidable.Files> => {
  const form = new formidable.IncomingForm();
  return new Promise((resolve, reject) => {
    form.parse(req, (err, fields, files) => {
      if (err) reject(err);
      resolve(files);
    });
  });
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  try {
    const files = await parseForm(req);
    const file = Array.isArray(files.file) ? files.file[0] : files.file; // Handle array or single file
    if (!file || !file.filepath) {
      throw new Error("No file uploaded or invalid file");
    }

    // Read file content
    const dataBuffer = await fs.readFile(file.filepath);
    const pdfData = await pdfParse(dataBuffer);
    const text = pdfData.text;

    // Analyze the text with OpenAI
    const completion = await openai.completions.create({
      model: 'text-davinci-003',
      prompt: `Analyze the following medical report and identify any potential health issues. Specify the problem, the associated body part, and its severity (low, moderate, high):\n\n${text}`,
      max_tokens: 1000,
    });

    const insights = completion.choices[0].text.trim();
    await fs.unlink(file.filepath); // Clean up uploaded file after processing

    res.status(200).json({ insights });
  } catch (error) {
    console.error("Error during file upload and analysis:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
}
