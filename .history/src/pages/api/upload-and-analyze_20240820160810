import { NextApiRequest, NextApiResponse } from 'next';
import formidable from 'formidable';
import { MongoClient } from 'mongodb';
import { promises as fs } from 'fs';
import pdfParse from 'pdf-parse';
import { OpenAI } from 'openai';  // Ensure correct import based on installed version

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const MONGODB_URI = process.env.MONGODB_URI!;
const MONGODB_DB_NAME = 'reportData';

let client: MongoClient | null = null;

async function connectToDatabase() {
  if (!client) {
    client = new MongoClient(MONGODB_URI);
    await client.connect();
  }
  return client.db(MONGODB_DB_NAME);
}

async function parseForm(req: NextApiRequest): Promise<{ fields: formidable.Fields; files: formidable.File[] }> {
  const form = new formidable.IncomingForm();
  return new Promise((resolve, reject) => {
    form.parse(req, (err, fields, files) => {
      if (err) return reject(err);
      resolve({ fields, files: Object.values(files) }); // Handling multiple files scenario
    });
  });
}

async function extractTextFromPDF(filePath: string): Promise<string> {
  const data = await fs.readFile(filePath);
  return pdfParse(data);
}

async function fetchOpenaiAnalysis(textData: string): Promise<string> {
  const response = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: `Analyze this medical report: ${textData}`,
    max_tokens: 300
  });
  return response.choices[0].text; // Ensure this matches the OpenAI SDK's expected response structure
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  try {
    const db = await connectToDatabase();
    const { files } = await parseForm(req);
    const file = files[0]; // Assuming single file upload

    if (!file) {
      return res.status(400).send('No file uploaded');
    }

    const textData = await extractTextFromPDF(file.filepath);
    const analysis = await fetchOpenaiAnalysis(textData);

    await db.collection('uploads').insertOne({
      filename: file.originalFilename,
      filepath: file.filepath,
      size: file.size,
      type: file.mimetype,
      analysis,
      createdAt: new Date()
    });

    await fs.unlink(file.filepath); // Clean up after processing
    res.status(200).json({ analysis });
  } catch (error) {
    console.error('Server error:', error);
    res.status(500).send('Internal server error');
  }
}
